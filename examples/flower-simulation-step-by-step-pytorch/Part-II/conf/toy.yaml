---


## THE EASY BITS

# a simple top-level element
foo: 123

# a hierarchy of variables
bar:
  baz: [1.0, 3.141592, 99]
  bazz: 24
  more:
    bla: "hello"
    blabla: ${foo} # reference to `foo` at the top of this file

# -------------------------------------------------------------------------------------------------
## NOW I'M INTERESTED

# A node describing a function with all arguments pre-defined
my_func:
  _target_: toy.function_test
  x: 123 # a named argument for your function
  y: 321 # another named argument for your function


# so we tell Hydra to instantiate a partial of this function. This is convenient if the second argument (y) is only defined at runtime
my_partial_func:
  _target_: toy.function_test
  _partial_: true
  x: 123

# create an object
my_object:
  _target_: toy.MyClass
  x: 32 # a property of the class

# -------------------------------------------------------------------------------------------------
## NOW YOU ARE FLYING

# You can have objects defined by Hydra inside other objects
# and by default all will be instantiated
my_complex_object:
  _target_: toy.MyComplexClass
  my_object:
    _target_: toy.MyClass
    x: ${bar.bazz} # reference to bar.bazz

# In some settings internal objects can't be instantiated at the same
# time as the parent object (maybe because it depends on some external
# variables or process). You can prevent this by telling Hydra not to
# instantiate objects recursively.
my_complex_object_non_recursive:
  _target_: toy.MyComplexClass
  _recursive_: false
  my_object:
    _target_: toy.MyClass
    # we'll pass the argument at runtime

# sometimes you want to deconstruct your config file into several, each designed for a clear purpose.
# For example, one set of .yaml files for dataset, another for model architectures. When you use Flower
# you probably want to have one set of .yaml for the strategies, another for different types of clients, etc
# With hydra, you want to structure these config files in a very particular way. For example, if you
# want a node (e.g 'toy_model`) to be parameterised by different config files, they all should go
# inside a directory called `toy_model`, then you do as shown below to pick different .yamls
defaults:
  - toy_model: resnet18 # will point to conf/toy_model/resnet18.yaml
  # if you want to override this parameter you'd do it without considering the "default" keyword
  # python toy.py toy_model=efficientnetb3
  # Note that `defaults` is a list (i.e., each element has `-` at the beginning)
